import json
import sys
from base64 import b64decode, b64encode

import click

from . import libprio


def common_options(func):
    options = [
        click.option(
            "--server-id",
            required=True,
            type=click.Choice(["A", "B"]),
            help="The identifier for match.",
        ),
        click.option(
            "--public-key-internal",
            required=True,
            type=bytes,
            help="The public key of the processing server.",
        ),
        click.option(
            "--public-key-external",
            required=True,
            type=bytes,
            help="The public key of the co-processing server.",
        ),
        click.option(
            "--private-key",
            required=True,
            type=bytes,
            help="The private key of the processing server.",
        ),
        click.option(
            "--output",
            required=True,
            type=click.Path(file_okay=False),
            help="The path to the output directory.",
        ),
    ]
    for option in options:
        func = option(func)
    return func


def input_internal_option(func):
    return click.option(
        "--input-internal",
        required=True,
        type=click.Path(file_okay=False),
        help="Directory containing data generated by the processing server.",
    )(func)


def input_external_option(func):
    return click.option(
        "--input-external",
        required=True,
        type=click.Path(file_okay=False),
        help="Directory containing data generated by the co-processing server.",
    )(func)


@click.command()
def shared_seed():
    """Generate a shared server secret in base64."""
    seed = libprio.PrioPRGSeed_randomize()
    click.echo(b64encode(seed))


@click.command()
def keygen():
    """Generate a curve25519 key pair as json."""
    private, public = libprio.Keypair_new()
    private_hex = libprio.PrivateKey_export_hex(private).decode("utf-8")[:-1]
    public_hex = libprio.PublicKey_export_hex(public).decode("utf-8")[:-1]
    data = json.dumps({"private_key": private_hex, "public_key": public_hex})
    click.echo(data)


@click.command()
@common_options
@input_internal_option
def verify1():
    """Decode a batch of shares"""
    click.echo("Running verify1")


@click.command()
@common_options
@input_internal_option
@input_external_option
def verify2():
    """Verify a batch of SNIPs"""
    click.echo("Running verify2")


@click.command()
@common_options
@input_internal_option
@input_external_option
def aggregate():
    """Generate an aggregate share from a batch of verified SNIPs"""
    click.echo("Running aggregate")


@click.command()
@common_options
@input_internal_option
@input_external_option
def publish():
    """Generate a final aggregate and remap data to a content blocklist"""
    click.echo("Running publish")


@click.group()
def main(args=None):
    """Command line utility for prio."""
    pass


main.add_command(shared_seed)
main.add_command(keygen)

main.add_command(verify1)
main.add_command(verify2)
main.add_command(aggregate)
main.add_command(publish)

if __name__ == "__main__":
    sys.exit(main())
